# GitHub Actions CI/CD Pipeline
# =============================
# Este pipeline se ejecuta automáticamente en cada push
# Ejecuta todos los tests (223 tests) y despliega si pasan

name: CI/CD Pipeline - TP 06 Pruebas Unitarias

# Cuándo se ejecuta el pipeline
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

# Variables globales
env:
  NODE_VERSION: "18.x"
  GO_VERSION: "1.21"

jobs:
  # Job 1: Tests y Build
  test-and-build:
    name: 🧪 Tests & Build
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del código
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      # Paso 2: Configurar Node.js
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      # Paso 3: Configurar Go
      - name: 🔧 Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      # Paso 4: Instalar dependencias
      - name: 📦 Install Dependencies
        run: |
          echo "Instalando dependencias..."
          make install

      # Paso 5: Ejecutar linters
      - name: 🔍 Run Linters
        run: |
          echo "Ejecutando linters..."
          make lint

      # Paso 6: Ejecutar TODOS los tests (223 tests)
      - name: 🧪 Run All Tests (223 tests)
        run: |
          echo "Ejecutando todos los tests..."
          echo "Backend: 92 tests"
          echo "Frontend: 94 tests" 
          echo "Create Course: 37 tests"
          echo "Total: 223 tests"
          make test

      # Paso 7: Generar reporte de cobertura
      - name: 📊 Generate Coverage Report
        run: |
          echo "Generando reporte de cobertura..."
          make test-coverage

      # Paso 8: Build de la aplicación
      - name: 🏗️ Build Application
        run: |
          echo "Building application..."
          npm run build

      # Paso 9: Build del backend
      - name: 🏗️ Build Backend
        run: |
          echo "Building backend..."
          cd EMARVE/backend
          go build -o main .

      # Paso 10: Subir artefactos
      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            EMARVE/backend/main
            coverage/

      # Paso 11: Notificación de éxito
      - name: ✅ Success Notification
        run: |
          echo "✅ Pipeline completado exitosamente!"
          echo "🎉 Todos los 223 tests pasaron"
          echo "🚀 Aplicación lista para despliegue"

  # Job 2: Despliegue (solo en main)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      # Paso 1: Checkout del código
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      # Paso 2: Descargar artefactos
      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      # Paso 3: Desplegar aplicación
      - name: 🚀 Deploy Application
        run: |
          echo "Desplegando aplicación..."
          # Aquí irían los comandos específicos de despliegue
          # Por ejemplo: docker-compose up -d
          echo "✅ Aplicación desplegada exitosamente!"

      # Paso 4: Verificar despliegue
      - name: 🔍 Verify Deployment
        run: |
          echo "Verificando despliegue..."
          # Health checks, smoke tests, etc.
          echo "✅ Despliegue verificado!"

  # Job 3: Notificaciones
  notify:
    name: 📢 Send Notifications
    runs-on: ubuntu-latest
    needs: [test-and-build, deploy]
    if: always() # Siempre se ejecuta

    steps:
      - name: 📢 Send Notifications
        run: |
          if [ "${{ needs.test-and-build.result }}" == "success" ]; then
            echo "✅ Tests pasaron exitosamente!"
            echo "🎉 223 tests completados"
          else
            echo "❌ Tests fallaron!"
            echo "🔍 Revisar logs para más detalles"
          fi
